1. O primeiro gatilho apresentado tem como funcionalidade verificar se, ao excluir um painelista, o painel ao qual ele estava associado deve ser removido ou não. Como pode haver mais de um painelista por painel, essa relação foi representada por meio de uma tabela de relacionamento APRESENTA_PN. O gatilho apresentado verifica os registros dessa tabela que estavam relacionados a essa painel, e em seguida, verifica se esses registros estão associados a apenas o painelista que foi removido. Ele remove os paineis que apresentarem essa condição. Depois, é apagada a relação entre painel e painelista da tabela de relacionamento.

Evento:
Remover na relação PAINELISTA.

Condição: 
Sempre.

Ação: 
Remover registros da relação PAINEL, quando essa não possuir nenhum registro com outro painelista na relação APRESENTA_PN.
Remover registros da relação APRESENTA_PN que estejam associados ao cpf correspondente ao painelista removido.

Oracle:

Para remover as relações da tabela PAINEL, foi usada uma clausula WHERE com IN em um SELECT aninhado.
O primeiro SELECT aninhado retorna todos os painéis que aparecem no máximo uma vez na relação APRESENTA_PN,
filtrando essa busca pelo campo id_painel, que é selecionado de um conjunto de valores obito pelo uso de IN em um SELECT aninhado.
Esse último retorna todos os valores de id_painel que estão associados ao painelista removido.

Depois da primeira remoção, é executado outro DELETE para remover todos os registros da relação DELETE que estão associados ao painelista.

Um detalhe importante é que a referência no Oracle para a linha removida que disparou o TRIGGER é feita por :old.

create or replace TRIGGER 
REMOVER_PAINEL
AFTER DELETE
ON PAINELISTA
FOR EACH ROW
BEGIN
    DELETE FROM PAINEL
    WHERE id_painel IN (
        SELECT id_painel, COUNT(*)
        FROM APRESENTA_PN
        WHERE id_painel IN (
            SELECT id_painel FROM APRESENTA_PN
            WHERE APRESENTA_PN.cpf = :old.cpf
        )
        GROUP BY id_painel
        HAVING COUNT(*) <= 1
    )

    DELETE FROM APRESENTA_PN
    WHERE APRESENTA_PN.cpf = :old.cpf
END;

SQL:

A estrutura do TRIGGER apresentado para o SQL padrão é a mesma da apresentada para o Oracle, com excessão à forma de referenciar a linha
que foi removida, que aqui é feita por: REFERENCING old row as oldRow, e acessada por oldRow.campoDesejado.

create TRIGGER 
REMOVER_PAINEL
AFTER DELETE
ON PAINELISTA
REFERENCING old row as oldRow
FOR EACH ROW
BEGIN ATOMIC
    DELETE FROM PAINEL
    WHERE id_painel IN (
        SELECT id_painel, COUNT(*)
        FROM APRESENTA_PN
        WHERE id_painel IN (
            SELECT id_painel FROM APRESENTA_PN
            WHERE APRESENTA_PN.cpf = oldRow.cpf
        )
        GROUP BY id_painel
        HAVING COUNT(*) <= 1
    )

    DELETE FROM APRESENTA_PN
    WHERE APRESENTA_PN.cpf = oldRow.cpf
END;

Casos de teste:
a.
b.
c.

2. O segundo trigger apresentado tem como função alterar o cadastro de um jornalista, quando um veículo de comunicação for removido.
Quando um veículo é cadastrado, é entendido que ele possui um relacionamento de parceria com o evento. Quando um jornalista é cadastrado, seus ingressos já foram comprados pelo veículo associado. Dessa forma, ao remover um veículo do sistema, todos os dados relacionados a esse devem ser apagados, inclusive os jornalistas e as matérias. Porém, como os ingressos do jornalista já foram comprados, não é interessante descartar todas as informações sobre o proprietário desse ingresso. Para solucionar esse problema, quando o veículo for removido, os dados dos jornalistas associados são apagados e ele é cadastrado como um participante pagante comum.

Evento:
Remover na relação VEICULO_COMUNICACAO.

Condição: 
Sempre.

Ação: 
Inserir na relação PAGANTE todos os jornalistas associados ao veiculo de comunicação removido
Remover esses mesmos jornalistas da relação ISENTO
Remover esses mesmos jornalistas da relação JORNALISTA
Remover os relacionamentos associados ao veiculo de comunicação da relação TRABALHA_EM

Oracle:

create or replace TRIGGER 
REMOVER_VEICULO_JORNALISTA
AFTER DELETE
ON VEICULO_COMUNICACAO
FOR EACH ROW
BEGIN
    INSERT INTO PAGANTE (cpf, valor_insc)
    SELECT cpf, 350.00
    FROM TRABALHA_EM
    WHERE TRABALHA_EM.codigo_vc = :old.codigo_vc

    DELETE FROM ISENTO
    WHERE ISENTO.cpf IN (
        SELECT cpf FROM TRABALHA_EM
        WHERE TRABALHA_EM.codigo_vc = :old.codigo_vc
    )

    DELETE FROM JORNALISTA
    WHERE JORNALISTA.cpf IN (
        SELECT cpf FROM TRABALHA_EM
        WHERE TRABALHA_EM.codigo_vc = :old.codigo_vc
    )

    DELETE FROM MATERIA
    WHERE MATERIA.cpf IN (
        SELECT cpf FROM TRABALHA_EM
        WHERE TRABALHA_EM.codigo_vc = :old.codigo_vc
    )
    
    DELETE FROM TRABALHA_EM
    WHERE TRABALHA_EM.codigo_vc = :old.codigo_vc
END;

SQL:

create TRIGGER 
REMOVER_VEICULO_JORNALISTA
AFTER DELETE
ON VEICULO_COMUNICACAO
REFERENCING old row as oldRow
FOR EACH ROW
BEGIN ATOMIC
    INSERT INTO PAGANTE (cpf, valor_insc)
    SELECT cpf, 350.00
    FROM TRABALHA_EM
    WHERE TRABALHA_EM.codigo_vc = oldRow.codigo_vc

    DELETE FROM ISENTO
    WHERE ISENTO.cpf IN (
        SELECT cpf FROM TRABALHA_EM
        WHERE TRABALHA_EM.codigo_vc = oldRow.codigo_vc
    )

    DELETE FROM JORNALISTA
    WHERE JORNALISTA.cpf IN (
        SELECT cpf FROM TRABALHA_EM
        WHERE TRABALHA_EM.codigo_vc = oldRow.codigo_vc
    )

    DELETE FROM MATERIA
    WHERE MATERIA.cpf IN (
        SELECT cpf FROM TRABALHA_EM
        WHERE TRABALHA_EM.codigo_vc = oldRow.codigo_vc
    )

    DELETE FROM MATERIA
    WHERE MATERIA.cpf IN (
        SELECT cpf FROM TRABALHA_EM
        WHERE TRABALHA_EM.codigo_vc = oldRow.codigo_vc
    )

    DELETE FROM TRABALHA_EM
    WHERE TRABALHA_EM.codigo_vc = oldRow.codigo_vc
END;

Casos de teste:
a.
b.
c.
